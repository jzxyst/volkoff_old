//=============================================================================
//【 GameServer 】
//-----------------------------------------------------------------------------
///**
//  @file       GameServer.h
//  @brief      GameServer
//  @author     yama
//*/
//=============================================================================

#pragma once

#include <vector>
#include "./../Network/TcpStream.h"


typedef std::vector< TcpStream* >   TcpStreamArray;

static const int GAMEPORT = 29796;

class GameSession;

//=============================================================================
// ■ GameServer クラス
//-----------------------------------------------------------------------------
///**
//  @brief      ネットワークモード時、ゲームサーバとなるクラス
//
//  @par
//              このクラスは GameManager 内にひとつだけ保持される。
//              また、GameManager を親として初期化した場合のみ作成される。
//
//              オフラインプレイ時はダミーとして作れればいいかなーというところ。
//*/
//=============================================================================
class GameServer
{
public:

    /// コンストラクタ
    GameServer();

    /// デストラクタ
    ~GameServer();

public:

    //---------------------------------------------------------------------
    ///**
    //  @brief      初期化
    //*/
    //---------------------------------------------------------------------
    void initialize( GameSession* sesson_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      接続を監視する (1フレームに1度呼び出す)
    //*/
    //---------------------------------------------------------------------
    void polling();

    //---------------------------------------------------------------------
    ///**
    //  @brief      サーバ自身を含む全てのホストにイベントを送信する (サーバ自身のGameSessonも含む)
    //
    //  @par
    //              オブジェクトの削除など、
    //              GameServer から GameSession に送信するときに使う。
    //*/
    //---------------------------------------------------------------------
    void sendEventToAllHost( u32 event_, void* data_, u32 size_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      指定したホスト以外の全てのホストの GameSession にイベントを送信する
    //
    //  @param[in]  exc_host_id_ : 除外するホスト ID
    //
    //  @par
    //              サーバ自身は 0。
    //*/
    //---------------------------------------------------------------------
    void sendEventToExclusionHost( u32 exc_host_id_, u32 event_, void* data_, u32 size_ );

    //---------------------------------------------------------------------
    ///**
    //  @brief      イベント処理
    //
    //  @par
    //              GameObject のとは違い、SYSEV_〜系のシステムイベントの処理関数。
    //*/
    //---------------------------------------------------------------------
    int HandleEvent( u32 event_, void* args_ );

private:

    static const int TEMP_BUFFER_SIZE = 2048;

    GameSession*    mMyGameSession;
    TcpStreamArray  mConnectedStreamArray;      ///< 接続済みソケット配列 (今のところサーバだけが使用してる)
    TcpStream*      mListen;                    ///< 新しい接続の検知用に使う
    char            mTempBuffer[ TEMP_BUFFER_SIZE ];    ///< 一時バッファ
};

//=============================================================================
//								End of File
//=============================================================================